<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin>
    <!-- Unique identifier of the plugin. It should be FQN. It cannot be changed between the plugin versions. -->
    <id>com.luweijie.dev.gear.generate.mapping.constructor</id>

    <!-- Public plugin name should be written in Title Case.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-name -->
    <name>GenerateMappingConstructor</name>

    <!-- A displayed Vendor name or Organization ID displayed on the Plugins Page. -->
    <vendor email="1397100450@qq.com">DevGear</vendor>
    <description><![CDATA[
        <h2>Object Mapping Constructor Generator</h2>

        <p>Simplify object-to-object mapping in your Java projects with this intelligent constructor generator.</p>

        <h3>Features:</h3>
        <ul>
            <li>Automatically generate constructors that map fields from one object to another</li>
            <li>Smart detection of getter methods and Lombok annotations</li>
            <li>User-friendly class selection interface with fuzzy search</li>
            <li>Customizable parameter naming for the source object</li>
            <li>Seamless integration with your existing codebase</li>
            <li>Supports various mapping scenarios: DTO to Entity, Entity to ViewModel, and more</li>
        </ul>

        <p>Eliminate tedious manual field mapping and embrace efficient, error-free code generation. Ideal for projects with complex domain models, multi-layered architectures, or any scenario requiring object-to-object mapping.</p>

        <h3>How to Use:</h3>
        <ol>
            <li>Open the Java file containing the target class (the class you want to add the constructor to).</li>
            <li>Place your cursor inside the class body.</li>
            <li>Right-click to open the context menu, or use the 'Code' menu in the top menu bar.</li>
            <li>Navigate to 'Generate' > 'Generate Mapping Constructor'.</li>
            <li>In the dialog that appears, search for and select the source class (the class you want to map from).</li>
            <li>Optionally, customize the parameter name for the source object.</li>
            <li>Click 'OK' to generate the constructor.</li>
        </ol>

        <p>The plugin will automatically generate a constructor that maps all matching fields from the source object to the target object, taking into account getter methods and Lombok annotations.</p>

        <h3>Tips:</h3>
        <ul>
            <li>Use the fuzzy search in the class selection dialog to quickly find the desired source class.</li>
            <li>The generated constructor will include comments for fields that don't have a matching counterpart in the source class.</li>
            <li>You can generate multiple constructors for different source classes in the same target class.</li>
        </ul>

        <p>Boost your productivity and maintain clean, consistent code with the Object Mapping Constructor Generator!</p>
    ]]></description>

    <change-notes><![CDATA[
        <ul>
            <li>Initial release</li>
            <li>Added support for custom source object parameter naming</li>
            <li>Improved class selection interface with fuzzy search</li>
        </ul>
    ]]></change-notes>

    <depends>com.intellij.modules.platform</depends>
    <depends>com.intellij.modules.java</depends>




    <extensions defaultExtensionNs="com.intellij">
        <postStartupActivity implementation="com.dev.gear.PluginInitializer"/>
    </extensions>

    <actions>
        <action id="Generate Mapping Constructor" class="com.dev.gear.GenerateMappingConstructorAction"
                text="Generate Mapping Constructor" description="Generate Mapping Constructor">
            <add-to-group group-id="GenerateGroup" anchor="last"/>

            <!-- 这里配置快捷键 -->
            <keyboard-shortcut keymap="$default" first-keystroke="ctrl shift B"/>
        </action>
    </actions>
</idea-plugin>